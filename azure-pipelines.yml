# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
# Whenever a change is made to the master branch
trigger:
- master

# using ubuntu latest vmImage
pool:
  vmImage: 'ubuntu-latest'

pr: 'none'

stages:
  - stage:
    jobs:
      - job: 'build'
        steps:
          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: 'proj0'
              organization: 'firstsonar2020'
              scannerMode: 'MSBuild'
              projectKey: '0f92f5207f7f0b675eac0a8c86988fbb04241c8a'
              projectName: 'proj0'
              extraProperties: |
                sonar.exclusions=**/obj/**,**/*.dll
                sonar.branch.name=$(Build.SourceBranchName)
                sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/coverage.opencover.xml
                sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx
          - script: dotnet build 'Proj0/Proj0/Proj0.sln'
          - task: DotNetCoreCLI@2
            displayName: dotnet test
            inputs:
              command: 'test'
              arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=CoverletOutputFormat=covertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
              projects: '**/*XUnitTest_proj0.csproj'
              nobuild: true
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage'
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'
          - task: SonarCloudAnalyze@1
          - task: SonarCloudPublish@1
      - job: 'publish'
        dependsOn: 'build'
        steps:
          - script: dotnet publish 'Proj0/Proj0/Proj0.sln'