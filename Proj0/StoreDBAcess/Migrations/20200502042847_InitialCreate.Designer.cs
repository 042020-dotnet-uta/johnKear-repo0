// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreDBAcess;

namespace StoreDBAcess.Migrations
{
    [DbContext(typeof(StoreDBContext))]
    [Migration("20200502042847_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StoreDBAcess.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrefLoc")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("StoreDBAcess.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LocName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("StoreDBAcess.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderHistoryId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("TimeStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("OrderId");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.HasIndex("OrderHistoryId");

                    b.HasIndex("SalesHistoryId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("StoreDBAcess.Models.OrderHistory", b =>
                {
                    b.Property<int>("OrderHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("OrderHistoryId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("OrderHistories");
                });

            modelBuilder.Entity("StoreDBAcess.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("UnitCost")
                        .HasColumnType("float");

                    b.HasKey("ProductId");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("StoreDBAcess.Models.SalesHistory", b =>
                {
                    b.Property<int>("SalesHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<double>("TotalSalesRevenue")
                        .HasColumnType("float");

                    b.HasKey("SalesHistoryId");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("SalesHistories");
                });

            modelBuilder.Entity("StoreDBAcess.Models.Order", b =>
                {
                    b.HasOne("StoreDBAcess.Models.Location", null)
                        .WithOne()
                        .HasForeignKey("StoreDBAcess.Models.Order", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreDBAcess.Models.OrderHistory", null)
                        .WithMany("Orders")
                        .HasForeignKey("OrderHistoryId");

                    b.HasOne("StoreDBAcess.Models.SalesHistory", null)
                        .WithMany("Sales")
                        .HasForeignKey("SalesHistoryId");
                });

            modelBuilder.Entity("StoreDBAcess.Models.OrderHistory", b =>
                {
                    b.HasOne("StoreDBAcess.Models.Customer", null)
                        .WithOne()
                        .HasForeignKey("StoreDBAcess.Models.OrderHistory", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StoreDBAcess.Models.Product", b =>
                {
                    b.HasOne("StoreDBAcess.Models.Location", null)
                        .WithOne()
                        .HasForeignKey("StoreDBAcess.Models.Product", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreDBAcess.Models.Order", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("StoreDBAcess.Models.SalesHistory", b =>
                {
                    b.HasOne("StoreDBAcess.Models.Location", null)
                        .WithOne()
                        .HasForeignKey("StoreDBAcess.Models.SalesHistory", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
