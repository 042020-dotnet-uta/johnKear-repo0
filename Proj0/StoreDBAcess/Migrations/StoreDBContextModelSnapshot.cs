// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreDBAcess;

namespace StoreDBAcess.Migrations
{
    [DbContext(typeof(StoreDBContext))]
    partial class StoreDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("StoreDBAcess.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNum")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrefLoc")
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("StoreDBAcess.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("StoreDBAcess.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrderHistoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SalesHistoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<double>("Total")
                        .HasColumnType("REAL");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrderHistoryId");

                    b.HasIndex("SalesHistoryId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("StoreDBAcess.Models.OrderHistory", b =>
                {
                    b.Property<int>("OrderHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderHistoryId");

                    b.HasIndex("CustomerId");

                    b.ToTable("OrderHistories");
                });

            modelBuilder.Entity("StoreDBAcess.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("UnitCost")
                        .HasColumnType("REAL");

                    b.HasKey("ProductId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrderId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("StoreDBAcess.Models.Quantities", b =>
                {
                    b.Property<int>("QuantitiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("QuantitiesId");

                    b.HasIndex("OrderId");

                    b.ToTable("Quantities");
                });

            modelBuilder.Entity("StoreDBAcess.Models.SalesHistory", b =>
                {
                    b.Property<int>("SalesHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TotalSalesRevenue")
                        .HasColumnType("REAL");

                    b.HasKey("SalesHistoryId");

                    b.HasIndex("LocationId");

                    b.ToTable("SalesHistories");
                });

            modelBuilder.Entity("StoreDBAcess.Models.Order", b =>
                {
                    b.HasOne("StoreDBAcess.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("StoreDBAcess.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("StoreDBAcess.Models.OrderHistory", null)
                        .WithMany("Orders")
                        .HasForeignKey("OrderHistoryId");

                    b.HasOne("StoreDBAcess.Models.SalesHistory", null)
                        .WithMany("Sales")
                        .HasForeignKey("SalesHistoryId");
                });

            modelBuilder.Entity("StoreDBAcess.Models.OrderHistory", b =>
                {
                    b.HasOne("StoreDBAcess.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("StoreDBAcess.Models.Product", b =>
                {
                    b.HasOne("StoreDBAcess.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("StoreDBAcess.Models.Order", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("StoreDBAcess.Models.Quantities", b =>
                {
                    b.HasOne("StoreDBAcess.Models.Order", null)
                        .WithMany("Quantities")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("StoreDBAcess.Models.SalesHistory", b =>
                {
                    b.HasOne("StoreDBAcess.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });
#pragma warning restore 612, 618
        }
    }
}
